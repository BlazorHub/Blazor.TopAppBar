@inherits LayoutComponentBase

<TopAppBar
    AboveAppDrawer
    KeepState
    Id="Demo"
    @bind-Variant="@Variant"
    @bind-Color="@Color"
    @bind-BackgroundMode="@BackgroundMode"
    @bind-BackgroundColorDirection="@BackgroundColorDirection"
    @bind-BackgroundColorStart="@BackgroundColorStart" 
    @bind-BackgroundColorEnd="@BackgroundColorEnd"
    BackgroundImage="_content/Shared/skyline.jpg"
    @bind-ScrollToTop="@ScrollToTop">
    <TopAppBarHeader>
        <TopAppBarHeaderNavTrigger>
            @{
                string textColor = BackgroundMode == BackgroundModes.Light || BackgroundMode == BackgroundModes.Image ? "text-body" : "text-light";
            }
            <button class="navbar-toggler bg-transparent no-outline" @onclick="navMenu.ToggleNavMenu">
                <span class="oi oi-menu align-middle @textColor"></span>
            </button>
        </TopAppBarHeaderNavTrigger>
        <TopAppBarHeaderLogo Src="_content/Shared/blazor.png" @bind-HideOnSmallDevices="@HideImage" />
        <TopAppBarHeaderTitle @bind-HideOnSmallDevices="@HideTitle">Demo</TopAppBarHeaderTitle>
    </TopAppBarHeader>
    <TopAppBarActions @bind-ShowActionsAlways="@ShowActionsAlways">
        @{
            string image = BackgroundMode == BackgroundModes.Light || BackgroundMode == BackgroundModes.Image ? "dark" : "light";
        }
        <TopAppBarAction>
            <a href="https://github.com/Mobsites/Blazor.NameOfComponent" target="_blank">
                <img src="_content/Shared/@(image)-github.png" width="24" height="24" />
            </a>
        </TopAppBarAction>
        <TopAppBarAction>
             <a href="https://github.com/Mobsites" target="_blank">
                <img src="_content/Shared/mobsites-logo.png" width="24" height="24" />
            </a>
        </TopAppBarAction>
        <TopAppBarAction>
            <a href="https://github.com/allan-mobley-jr" target="_blank">
                <img src="_content/Shared/me.png" width="24" height="24" />
            </a>
        </TopAppBarAction>
    </TopAppBarActions>
</TopAppBar>

<div class="sidebar @TopAppBar.AdjustmentMarkerClass">
    <NavMenu @ref="@navMenu" />
</div>

<!-- Add adjustment class to prevent TopAppBar from hiding some of this content -->
<div class="main @TopAppBar.AdjustmentMarkerClass">
    <div class="content px-4">
        <CascadingValue Value="this">
            @Body
        </CascadingValue>
    </div>
</div>

@code {
    NavMenu navMenu;
    private TopAppBar.Variants variant = TopAppBar.Variants.Standard;
    public TopAppBar.Variants Variant
    {
        get => variant; 
        set
        {
            variant = value;
            StateHasChanged();
        }
    }

    private bool hideTitle;
    public bool HideTitle
    {
        get => hideTitle;  
        set
        {
            hideTitle = value;
            StateHasChanged();
        }
    }

    private bool hideImage;
    public bool HideImage
    {
        get => hideImage; 
        set
        {
            hideImage = value;
            StateHasChanged();
        }
    }

    private bool scrollToTop = true;
    public bool ScrollToTop
    {
        get => scrollToTop; 
        set
        {
            scrollToTop = value;
            StateHasChanged();
        }
    }

    private bool showActionsAlways;
    public bool ShowActionsAlways
    {
        get => showActionsAlways; 
        set
        {
            showActionsAlways = value;
            StateHasChanged();
        }
    }

    private BackgroundModes backgroundMode = BackgroundModes.Gradient;
    public BackgroundModes BackgroundMode
    {
        get => backgroundMode; 
        set
        {
            backgroundMode = value;
            StateHasChanged();
        }
    }

    private BackgroundColorDirections backgroundColorDirection = BackgroundColorDirections.LeftToRight;
    public BackgroundColorDirections BackgroundColorDirection
    {
        get => backgroundColorDirection;
        set 
        {
            backgroundColorDirection = value;
            StateHasChanged();
        }
    }

    private string backgroundColorStart = "rgb(5, 39, 103)";
    public string BackgroundColorStart
    {
        get => backgroundColorStart;
        set 
        {
            backgroundColorStart = value;
            StateHasChanged();
        }
    }

    private string backgroundColorEnd = "#3a0647";
    public string BackgroundColorEnd
    {
        get => backgroundColorEnd;
        set 
        {
            backgroundColorEnd = value;
            StateHasChanged();
        }
    }

    private string color = "white";
    public string Color
    {
        get => color;
        set 
        {
            color = value;
            StateHasChanged();
        }
    }
}